No shapes can be defined unless there is a cartesian coordinate system to define them within
- Default cartesian coordinate system? Yes
Axises can be defined from points other than vertical or horizontal relativity

The outer edge of the display should be defined by the max and min points of the containing shapes? or by the cartesian coordinate system?

 - The cartesian coordinate system

The test scenarios within the test directory can be data producers, such that they feed the UI, Integration of Kotlin would be next.

Rather than having the drawing area stretch or shrink to fit. It simply provides a window as is for the view box.

The viewbox will stretch and shrink to fit. For instance.

in a drawing area of 800, 500

an area of 8000 by 5000 may be displayed as a result of the viewbox dimensions.

To utilize the curves, the shape can be determined by its type and curvature derived.

After creating a shape, it shows up in the list, including its center point
A list of shapes, points, lines, etc can be selected and edited within the gui via right click. even changing of the points

Mouse coordinates are displayed on the screen

What about fish lens? or different perspective orientations besides rectangular viewbox?

for a viewbox. it depends on the line and where it intersects with the viewbox boundary.

imagine a line being draw that is cut off at both the starting and ending points, but the middle section is seen.

How could such a line be detected?

the point would still need to be translated as proportional to the viewbox

Make it so the drawing area is movable. put a selectable gray line border.

This would decouple the drawing area from the rest of the window.

Locking the drawing area to the whole window can be an option, as well as locking the drawing area to some fraction of the window

This would also be true of other drawing areas, to where one drawing area takes up half of the window etc etc

Stretch/shrink to fit to largest coordinate would also be good

Should it stretch in perfect rectangularity? |-x| == x?

or |-x| != x?

Memory allocation overhead needs to be considered when revising the code, to new or not to new

Why is it that creating a circle with higher and higher radii doesn't register scaling correctly?

Why is it that upon forcing scaling to a massive proportion does the scaling reflect something expected?

There should never be a point that is entered that cannot be seen with the current setup, which is viewbox locked to bounding coordinates.

C Circle 0 0 50000 2

C cp

P

Command

Command1


                        //In reality, the client side coordinate system should really just be taking in shapes
                        //From the kotlin server.
                        //to which, the producers of the shapes and movement information is being fed into kotlin

Shapes must handle their own generic instantiation process.
this means to further extend the available shapes,
a general format of construction and standardization of constructors must be followed.

CT is the load tester right now.

1. create a new display that houses all of the shapes, lines and points contained in the cartesian coordinate system
1a. allow a user to select them and move them around
1b. allow a user to delete them, copy them, etc.
1c. allow a user to make changes to shapes, replace shapes, replace lines, and enter in new point information, etc.

2. Integrate Kotlin and data producers
2a. Triangulation of potential objects

3. Multiple displays

4. Multiple drawing areas in a  single display

5. 3Dimensional implementations

Streamlining the drawing process. Only changes to the drawing area should be redrawn.

There is an initial draw function which calls a function that draws everything in the backing system at once.

A custom container is used such that when a shape, line, or point is added to the custom container it is also added to a drawing queue.

at the end of the add function, everything in the drawing queue is batch processed at once.

Second thought. Since the repaint function removes everything that was drawn.

The change processing mechanism will instead be used to perform computations of points only once.
And what is drawn will be stored separately as results of those computations.

//todo: resize should not cause a re-add of any points
    //Same goes for adding a new bounding point
    //the "allpoints" container should just be itterated through
    //performing the transformation there.

none of the documentation is even relevant as documentation

Documentation is supposed to be about how and why the system was created the way it was
Design documentation should be top priority.

//todo: get JIRA Setup and try and integrate the purpose of the software into JIRA's structuring
//todo: understand what has to be done to document the requirements, purpose and design of this software.
